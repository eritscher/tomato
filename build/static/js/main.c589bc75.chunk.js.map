{"version":3,"sources":["components/UI/Button/Button.js","components/Timer/Timer.js","components/Selection/Selection.js","components/TaskList/Task/Task.js","components/TaskList/TaskList.js","components/UI/Backdrop/Backdrop.js","components/Explaination/Explaination.js","containers/Tomato.js","App.js","registerServiceWorker.js","index.js"],"names":["button","props","react_default","a","createElement","Object","assign","className","children","timer","secondsRemaining","totalSeconds","reset","fillPercentage","getSeconds","slice","getMinutes","Math","floor","seconds","minutes","titleText","concat","document","title","formattedTime","role","aria-label","style","width","Button_Button","onClick","selection","selectionHandler","task","value","handleRemoveTask","id","TaskList","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyUp","e","keyCode","addTask","target","newTaskInput","current","focus","createTasks","tasks","map","Task_Task","key","React","createRef","console","log","playing","onKeyUp","type","ref","disabled","Component","backdrop","show","clicked","styles","explaination","openClass","shouldShow","open","Backdrop_Backdrop","explainationToggle","join","textAlign","rel","href","Tomato","bind","assertThisInitialized","startTimer","resetTimer","addTaskHandler","removeTaskHandler","JSON","parse","localStorage","getItem","state","notificationsAllowed","showExplaination","taskList","_this2","window","notificationLevel","Notification","permission","setState","requestPermission","then","res","catch","err","_this3","interval","setInterval","clearInterval","alert","prevState","newTaskList","toConsumableArray","push","length","setItem","stringify","filtered","filter","timerOutput","Selection_Selection","Timer_Timer","components_TaskList_TaskList","Explaination_Explaination","App","containers_Tomato","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c589bc75.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\nconst button = (props) => (\n\n    <button className=\"btn\" {...props}>{props.children}</button>\n);\n\nexport default button;","import React from 'react';\nimport './Timer.css';\nimport Button from \"../UI/Button/Button\";\nimport PropTypes from 'prop-types';\n\nconst timer = (props) => {\n\n    const  { secondsRemaining, totalSeconds, reset } = props\n    const fillPercentage = ((totalSeconds - secondsRemaining) / totalSeconds) * 100 + '%';\n\n    const getSeconds = () => {\n        return ('0' + secondsRemaining % 60).slice(-2)\n    }\n    const getMinutes = () => {\n        return Math.floor(secondsRemaining / 60);\n    }\n    const seconds = getSeconds();\n    const minutes = getMinutes();\n\n    let titleText = `${minutes}:${seconds}`;\n    if(titleText === '0:00') {\n        titleText = '🔔🔔🔔 Timer Done'\n    }\n    document.title = titleText;\n\n    let formattedTime =\n        <div className='timer'>\n            {`${getMinutes()}`}\n            <div className=\"tomato-container\">\n            <span className=\"tomato\" role=\"img\" aria-label=\"clock-colon\">🍅</span>\n            <span className=\"tomato\" role=\"img\" aria-label=\"clock-colon\">🍅</span>\n            </div>\n            {`${getSeconds()}`}\n        </div>;\n\n    return (\n        <div className=\"timer-container\">\n            <div className=\"progress\">\n                <div className=\"inner-progress\" style={{ width: fillPercentage}}></div>\n            </div>\n            {formattedTime}\n            <Button onClick={reset}>Reset</Button>\n\n        </div>\n    );\n}\n\nexport default timer;\n\ntimer.propTypes = {\n    secondsRemaining: PropTypes.number.isRequired,\n    totalSeconds: PropTypes.number.isRequired,\n    reset: PropTypes.func\n}","import React from \"react\";\nimport Button from '../UI/Button/Button';\nimport './Selection.css';\nimport PropTypes from 'prop-types';\nconst selection = (props) => {\n    document.title = 'Tomato Tomato'\n    return (\n        <div className='btn-container'>\n            <Button onClick={() => props.selectionHandler('work')}> I need to work</Button>\n            <Button onClick={() => props.selectionHandler('break')}> I need to take five</Button>\n            <Button onClick={() => props.selectionHandler('longBreak')}>I need a longer break</Button>\n\n        </div>\n    );\n\n};\n\nexport default selection;\n\nselection.propTypes = {\n    selectionHandler: PropTypes.func\n};","import React from 'react';\nimport './Task.css';\nimport PropTypes from 'prop-types';\n\nconst task = (props) => (\n\n    <div className=\"task\" >\n       <div className=\"task-text\">\n            {props.task.value}\n        </div>\n        <div className=\"task-delete\" onClick={() => props.handleRemoveTask(props.task.id)}>&times;</div>\n    </div>\n)\n\n\n\nexport default task;\n\ntask.propTypes = {\n    task: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n    })\n}","import React from 'react';\nimport Task from './Task/Task';\nimport './TaskList.css';\n\nimport PropTypes from 'prop-types';\n\nclass TaskList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.newTaskInput = React.createRef();\n    }\n    handleKeyUp = (e) => {\n        if (e.keyCode === 13) {\n            this.props.addTask(e.target.value);\n\n            this.newTaskInput.current.focus()\n\n            this.newTaskInput.current.value = '';\n        }\n    }\n\n    createTasks = () => this.props.tasks.map(task => (\n        <Task\n            key={task.id}\n            task={task}\n            handleRemoveTask={this.props.handleRemoveTask}\n        />\n    ));\n    render() {\n        console.log('rerender')\n        return (\n            <div className=\"task-list-container\">\n                {!this.props.playing ?\n                    <div>\n                        <h2>Add New Tasks</h2>\n                        <div className=\"input-container\" onKeyUp={this.handleKeyUp}>\n                            <input type=\"text\" className=\"input\" ref={this.newTaskInput} disabled={this.props.disabled} />\n                        </div>\n                    </div>\n                    : null}\n                {this.createTasks()}\n\n            </div>\n        );\n    }\n\n};\n\nexport default TaskList;\n\nTaskList.propTypes = {\n    addTask: PropTypes.func,\n    tasks: PropTypes.array,\n    playing: PropTypes.bool,\n    disabled: PropTypes.bool\n\n};\n","import React from 'react';\nimport './Backdrop.css';\nimport PropTypes from 'prop-types';\nconst backdrop = (props) => (\n    props.show ? <div className=\"backdrop\" onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;\n\nbackdrop.propTypes = {\n    show: PropTypes.bool.isRequired,\n    clicked: PropTypes.func.isRequired\n}","import React from 'react';\nimport Backdrop from '../UI/Backdrop/Backdrop';\nimport styles from './Explaination.css';\n\nimport PropTypes from 'prop-types';\nconsole.log(styles)\nconst explaination = (props) => {\n    let openClass = props.shouldShow ? `${styles.open}` : null;\n    return (\n        <div>\n            <Backdrop show={props.shouldShow} clicked={props.explainationToggle}></Backdrop>\n            <div className={[`${styles['explaination-container']}`, openClass].join(' ')}>\n                <h2 style={{ textAlign: 'center' }}>What is Pomodoro?</h2>\n                <p>\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Pomodoro_Technique\">\n                        Pomodoro\n                    </a>\n                    &nbsp;is a productivity technique to keep yourself organized.\n                </p>\n\n                <ul>\n                    <p>The basic principle is as follows:</p>\n                    <li>List out 3-4 tasks you need to complete.</li>\n                    <li>Work uninterupted for 25 minutes.</li>\n                    <li>Cross out any tasks as you complete them.</li>\n                    <li>Take a 5 minute break.</li>\n                    <li>Repeat.</li>\n                    <li>After 3-4 iterations take a longer break, about 15 minutes.</li>\n                </ul>\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default explaination;\n\nexplaination.propTypes = {\n    shouldShow: PropTypes.bool.isRequired,\n    explainationToggle: PropTypes.func.isRequired\n};\n","import React, { Component } from 'react';\nimport Timer from '../components/Timer/Timer';\nimport Selection from '../components/Selection/Selection';\nimport TaskList from '../components/TaskList/TaskList';\nimport Explaination from '../components/Explaination/Explaination';\nclass Tomato extends Component {\n    constructor(props) {\n        super(props);\n        this.selectionHandler = this.selectionHandler.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.resetTimer = this.resetTimer.bind(this);\n        this.addTaskHandler = this.addTaskHandler.bind(this);\n        this.removeTaskHandler = this.removeTaskHandler.bind(this);\n        this.explainationToggle = this.explainationToggle.bind(this);\n        const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n        this.state = {\n            playing: false,\n            secondsRemaining: 0,\n            totalSeconds: 0,\n            notificationsAllowed: false,\n            showExplaination: false,\n            taskList: tasks\n        }\n\n    }\n\n    componentWillMount() {\n\n    }\n    componentDidMount() {\n        if (\"Notification\" in window) {\n            const notificationLevel = Notification.permission;\n            if (notificationLevel === 'granted' ) {\n                this.setState({notificationsAllowed: true})\n            } else if (notificationLevel === 'default') {\n                Notification.requestPermission()\n                    .then(res => {\n                        if(res === 'granted') {\n                            this.setState({ notificationsAllowed: true })\n                        } else {\n                            this.setState({ notificationsAllowed: false })\n                        }\n                    }).catch(err => console.log(err))\n            }\n\n        }\n    }\n\n    selectionHandler(selection) {\n        let seconds = null;\n        switch (selection) {\n            case 'work':\n                seconds = 1500\n                break;\n            case 'break':\n                seconds = 300\n                break;\n            case 'longBreak':\n                seconds = 900\n                break;\n            default:\n                seconds = 1500\n                break;\n        }\n\n        this.setState({ playing: true, secondsRemaining: seconds, totalSeconds: seconds })\n        this.startTimer();\n    }\n\n    startTimer() {\n        this.interval = setInterval(() => {\n            if (this.state.secondsRemaining === 0) {\n                clearInterval(this.interval);\n                this.setState({ playing: false });\n                if (this.state.notificationsAllowed) {\n                    new Notification('🔔🔔🔔 Timer Done!!');\n\n                } else {\n                    alert('🔔🔔🔔 Timer Done!!')\n\n                }\n\n\n            } else {\n                this.setState((prevState, props) => {\n                    return {\n                        secondsRemaining: prevState.secondsRemaining - 1\n                    }\n                })\n            }\n        }, 1000);\n    }\n    resetTimer() {\n        clearInterval(this.interval);\n        this.setState({ playing: false, secondsRemaining: 0 })\n    }\n    addTaskHandler(value) {\n        const newTaskList = [...this.state.taskList];\n        newTaskList.push({id: newTaskList.length, value});\n        localStorage.setItem('tasks', JSON.stringify(newTaskList));\n        this.setState({ taskList: newTaskList});\n\n    }\n    removeTaskHandler(id) {\n        const filtered = this.state.taskList.filter(task => task.id !== id);\n        localStorage.setItem('tasks', JSON.stringify(filtered));\n        this.setState({taskList: filtered})\n    }\n    explainationToggle() {\n        this.setState((prevState, props) => {\n            return {showExplaination: !prevState.showExplaination}\n        })\n    }\n    render() {\n        let timerOutput = <Selection\n            selectionHandler={this.selectionHandler} />;\n\n        if (this.state.playing) {\n            timerOutput = <Timer\n                secondsRemaining={this.state.secondsRemaining}\n                totalSeconds={this.state.totalSeconds}\n                reset={this.resetTimer}\n            />\n\n        }\n\n        return (\n            <div>\n                {timerOutput}\n                <TaskList\n                    playing={this.state.playing}\n                    tasks={this.state.taskList}\n                    addTask={this.addTaskHandler}\n                    handleRemoveTask={this.removeTaskHandler}\n                ></TaskList>\n                <Explaination\n                    shouldShow={this.state.showExplaination}\n                    explainationToggle={this.explainationToggle}\n                ></Explaination>\n                <a onClick={this.explainationToggle} className=\"what-is\">What is Pomodoro?</a>\n            </div>\n        )\n    }\n\n\n};\n\nexport default Tomato","import React, { Component } from 'react';\nimport './App.css';\n\nimport Tomato from './containers/Tomato';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-Header\">\n          <h1>Tomato <span role=\"img\" aria-label=\"tomato\">🍅</span> Tomato</h1>\n          <h3>Stay productive with Pomodoro!</h3>\n        </div>\n        <div className=\"App-Container\">\n          <Tomato></Tomato>\n        </div>\n        <div className=\"App-Footer\">\n\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}